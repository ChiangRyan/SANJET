using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using OfficeOpenXml;
using SANJET.Core.Models; // Assuming DeviceRecord is here
using SANJET.Core.Services; // Assuming SqliteDataService is here
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Windows; // For MessageBox
using System.Windows.Data; // For CollectionViewSource

namespace SANJET.Core.ViewModels
{
    public partial class RecordViewModel : ObservableObject // Inherit from ObservableObject
    {
        private readonly SqliteDataService _dataService;
        private readonly int _deviceId;
        private readonly string _deviceName;
        private readonly string _currentUsername;
        private readonly int _runcount;

        // Observable Properties generated from these fields
        [ObservableProperty]
        private ObservableCollection<DeviceRecord> _deviceRecords;

        [ObservableProperty]
        private ICollectionView _filteredDeviceRecords;

        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(DeleteRecordCommand))] // Notify DeleteRecordCommand when SelectedRecord changes
        private DeviceRecord? _selectedRecord; // Nullable if it can be unselected

        [ObservableProperty]
        [NotifyCanExecuteChangedFor(nameof(AddRecordCommand))] // Notify AddRecordCommand when RecordContent changes
        private string _recordContent = string.Empty;

        [ObservableProperty]
        private string _filterUsername = string.Empty;

        [ObservableProperty]
        private DateTime? _filterStartDate;

        public RecordViewModel(List<DeviceRecord> records, int deviceId, string deviceName, string username, int runcount, SqliteDataService dataService)
        {
            _dataService = dataService;
            _deviceId = deviceId;
            _deviceName = deviceName;
            _currentUsername = username;
            _runcount = runcount;

            Debug.WriteLine($"RecordViewModel 初始化: DeviceId={_deviceId}, DeviceName={_deviceName}, Username={_currentUsername}");
            if (!_dataService.DeviceExists(_deviceId))
            {
                Debug.WriteLine($"無效的 DeviceId: {_deviceId}");
                MessageBox.Show($"設備 ID {_deviceId} 不存在於資料庫中，請選擇有效設備", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
                // Initialize collections to prevent null issues, even if device is invalid
                _deviceRecords = new ObservableCollection<DeviceRecord>();
                _filteredDeviceRecords = CollectionViewSource.GetDefaultView(_deviceRecords);
                return; // Potentially exit early or handle differently
            }

            _deviceRecords = new ObservableCollection<DeviceRecord>(records.OrderByDescending(r => r.Timestamp));
            _filteredDeviceRecords = CollectionViewSource.GetDefaultView(DeviceRecords); // Use the generated public property
            FilteredDeviceRecords.SortDescriptions.Add(new SortDescription("Timestamp", ListSortDirection.Descending));
            FilteredDeviceRecords.Filter = FilterRecords;

            // Command properties (e.g., AddRecordCommand) are now generated by [RelayCommand] attributes on methods.
            // No need to initialize them here.
        }

        private bool CanAddRecord()
        {
            return !string.IsNullOrWhiteSpace(RecordContent);
        }

        [RelayCommand(CanExecute = nameof(CanAddRecord))]
        private void AddRecord()
        {
            try
            {
                Debug.WriteLine(
                   $" AddRecord: DeviceId={_deviceId}," +
                   $" DeviceName={_deviceName}," +
                   $" Username={_currentUsername}," +
                   $" Runcount={_runcount}," +
                   $" Content={RecordContent}"
                );

                var newRecord = new DeviceRecord
                {
                    DeviceId = _deviceId,
                    DeviceName = _deviceName,
                    RunCount = _runcount,
                    Username = _currentUsername,
                    Content = RecordContent.Trim(), // Use generated property
                    Timestamp = DateTime.Now
                };

                _dataService.AddDeviceRecord(newRecord);
                RefreshRecords(); // This is now a command, but can also be called directly as a method
                RecordContent = string.Empty; // Reset input

                MessageBox.Show("記錄已成功添加！", "成功", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"AddRecord failed: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"添加記錄時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool CanDeleteRecord()
        {
            return SelectedRecord != null;
        }

        [RelayCommand(CanExecute = nameof(CanDeleteRecord))]
        private void DeleteRecord()
        {
            // SelectedRecord is an [ObservableProperty], so we use its generated public property name.
            if (SelectedRecord == null) // Should be caught by CanDeleteRecord, but good for safety
            {
                MessageBox.Show("請先選擇要刪除的記錄", "提示", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            try
            {
                var result = MessageBox.Show($"確定要刪除ID為 {SelectedRecord.Id} 的記錄嗎？", "確認刪除",
                    MessageBoxButton.YesNo, MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    Debug.WriteLine($"正在刪除記錄 ID: {SelectedRecord.Id}，設備 ID: {_deviceId}");
                    bool success = _dataService.DeleteDeviceRecord(_deviceId, SelectedRecord.Id);

                    if (success)
                    {
                        DeviceRecords.Remove(SelectedRecord); // Update original collection
                        // FilteredDeviceRecords will update automatically if bound to DeviceRecords
                        // or call FilteredDeviceRecords.Refresh() if needed.
                        MessageBox.Show("記錄已成功刪除！", "成功", MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    else
                    {
                        MessageBox.Show("刪除記錄失敗！記錄可能已被其他用戶刪除。", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
                        RefreshRecords(); // Method call
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"DeleteRecord failed: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"刪除記錄時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void RefreshRecords()
        {
            try
            {
                var records = _dataService.GetDeviceRecords(_deviceId);
                DeviceRecords.Clear();
                foreach (var record in records.OrderByDescending(r => r.Timestamp))
                {
                    DeviceRecords.Add(record);
                }
                // FilteredDeviceRecords.Refresh(); // CollectionViewSource.GetDefaultView should auto-refresh
                // if the source (DeviceRecords) is an ObservableCollection
                // and items are added/removed. If full re-filtering is needed, call Refresh.
            }
            catch (Exception ex)
            {
                MessageBox.Show($"刷新記錄時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool CanExportToExcel()
        {
            return DeviceRecords != null && DeviceRecords.Any();
        }

        [RelayCommand(CanExecute = nameof(CanExportToExcel))]
        [Obsolete]
        private void ExportToExcel()
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "Excel檔案 (*.xlsx)|*.xlsx",
                    Title = "導出設備記錄",
                    FileName = $"{_deviceName}_記錄_{DateTime.Now:yyyyMMdd}",
                    DefaultExt = ".xlsx"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;
                    // Use AppContext.BaseDirectory for .NET Core / .NET 5+
                    string templatePath = Path.Combine(AppContext.BaseDirectory, "導出模板", "CP08-003-02版-產品測試記錄表.xlsx");

                    if (!File.Exists(templatePath))
                    {
                        MessageBox.Show($"模板檔案不存在: {templatePath}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }

                    // EPPlus 6+ License
                    ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial; // Or your specific license type
                    // If you have a specific license key mechanism like before:
                    // ExcelPackage.License.SetNonCommercialOrganization("Sanjet");


                    using (var package = new ExcelPackage(new FileInfo(templatePath)))
                    {
                        var worksheet = package.Workbook.Worksheets.FirstOrDefault(); // Get the first worksheet
                        if (worksheet == null)
                        {
                            MessageBox.Show("模板檔案中找不到工作表。", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
                            return;
                        }

                        int startRow = 4; // 根據模板格式調整填寫起始列

                        // Use the public DeviceRecords property
                        foreach (var record in DeviceRecords.OrderBy(r => r.Timestamp))
                        {
                            worksheet.Cells[startRow, 1].Value = record.Id;
                            worksheet.Cells[startRow, 2].Value = record.Timestamp;
                            worksheet.Cells[startRow, 2].Style.Numberformat.Format = "yyyy-mm-dd hh:mm:ss";
                            worksheet.Cells[startRow, 3].Value = record.DeviceName;
                            worksheet.Cells[startRow, 4].Value = record.RunCount;
                            worksheet.Cells[startRow, 5].Value = record.Content;
                            worksheet.Cells[startRow, 6].Value = record.Username;
                            startRow++;
                        }
                        // AutoFitColumns after data is inserted
                        if (startRow > 4) // Check if any data was actually written
                        {
                            worksheet.Cells[1, 1, startRow - 1, 6].AutoFitColumns();
                        }


                        package.SaveAs(new FileInfo(filePath));
                    }

                    MessageBox.Show($"記錄已成功導出至: {filePath}", "導出成功", MessageBoxButton.OK, MessageBoxImage.Information);

                    if (MessageBox.Show("是否立即打開導出的檔案？", "操作確認", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                    {
                        Process.Start(new ProcessStartInfo(filePath) { UseShellExecute = true });
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"ExportToExcel failed: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"導出Excel時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private bool FilterRecords(object item)
        {
            if (item is not DeviceRecord record) return false;

            bool matches = true;

            // Use generated public properties for filter values
            if (!string.IsNullOrWhiteSpace(FilterUsername))
            {
                matches &= record.Username.Contains(FilterUsername, StringComparison.OrdinalIgnoreCase);
            }

            if (FilterStartDate.HasValue)
            {
                matches &= record.Timestamp.Date >= FilterStartDate.Value.Date;
            }

            return matches;
        }

        [RelayCommand]
        private void ApplyFilter()
        {
            try
            {
                Debug.WriteLine("Applying filter...");
                FilteredDeviceRecords.Refresh(); // Use generated public property
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"ApplyFilter failed: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"應用篩選時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void ResetFilter()
        {
            try
            {
                Debug.WriteLine("Resetting filter...");
                FilterUsername = string.Empty; // Use generated public property setters
                FilterStartDate = null;
                FilteredDeviceRecords.Refresh(); // Use generated public property
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"ResetFilter failed: {ex.Message}\nStackTrace: {ex.StackTrace}");
                MessageBox.Show($"重置篩選時發生錯誤: {ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}